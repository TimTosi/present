Show & Tell: Docker & FishFinger
Core Service Team
14:00 18 Jul 2017

Tim Tosi
Core Service Dev, LML Technologies
timothee.tosi@gmail.com

* What we just saw

- Usin docker-compose allows to write integration tests locally which impoves the safety of our services
- Using docker compose allows to reduce greatly the time spent on test as we don t need to deploy to concourse in order to check code updates

* What can we improve from here ?

The solution proposed is to use scripting to launch docker-compose *BEFORE* tests execution

What if you could programmatically handle everything INSIDE your test code and Using
your compose file as a native Go object ?

This is why FishFinger has been developped.

* What is FishFinger ?

FishFinger is a Dockerfile and Docker-Compose lightweight programmatic library
written in Go. This project provides easy to use abstractions of official Docker
libraries with no other dependency than official Docker libraries.

* What does it provides ?

An fine grained & programmatic control over your compose file.

Launch it & stop it at will.

.code launch1.go /START OMIT/,/END OMIT/

* Integration with test codebase

For convenience, let's just set an setup & a tear down functions

.code test1.go /START OMIT/,/END OMIT/

* Integration with test codebase

Now here is what our test looks like:

.code test2.go /START OMIT/,/END OMIT/

* Integration with test codebase

Of course, we could get rid og the setup and tear down functions but using them
ensures that a fresh new deterministic environment is provided between each test.

That means a test does NOT introduce biases for another test, resulting in
false positive and/or false negative results.

And this is a safety that the use of scripting to launch docker-compose *BEFORE*
tests execution does not provide.

* Wait there's MUCH more...

But TBH the original main purpose of this package is elsewhere.

Actually, I used to do integration tests WITH the use of an external script at my previous work...

// Gopher image confused

* But...

But it was UNTIL I ran into this hell:
.image issue.png

This is called the container initialization delay.
And trust me when I tell you: this issue is closed but NOT resolved.

* A bit more about Docker container internal state

When you launches an app inside of a container, your have to consider two states:

- The container state
- The application state

We consider a container as UP when it enters its "RUNNING" state.

Nevrtheless, the two of them are decoupled.

That means a container will be considered `RUNNING` regardless of the software
state, leading to programmatic errors. Moreover, that is not because the main
dockerized software is running that you consider your container ready.

* In practical

Most of the time, it won't be an issue. Launching a Redis server is almost
instant and you will cover the delays between container and app by implementing
a basic "max retry" pattern.

In some situations it will be very problematic.

Let's say you have a basic compose file where you defined a service running a
SQL database. In this case, you are using it for testing purposes because you do
not want to use a mocking driver.

* Naive Approach

Basically, you could build an image with all your data preloaded but currently
you do not want to rebuild your image each time you update your dataset because
it's evolving frequently. In addition, it will produce overweight images.
And you don't want overweight images, right ?

You also could set all the data in a setup function.
But how do you test the test function ? Who watches the watchmen ?

* FishFinger solution

FishFinger allow you to resolve this easily by using the `Compose.StartBackoff` function.

.code backoff1.go /START OMIT/,/END OMIT/

This function takes two arguments: the Backoff function used and a list of service
name that will be started by this function call.

The Backoff function used here is the one provided by default by the Fishfinger
project but you are expected to provide another one that suits your need.

* FishFinger Backoff

Basically, all it does ot to try to connect to a socket. Once it does, it closes
the connection and the function returns.

On the Docker image side, it is implemented this way:

.code compose1.go /START OMIT/,/END OMIT/

.code compose2.go /START OMIT/,/END OMIT/

* FishFinger Backoff

This is another safety provided by FishFinger and one of the elegant way to
tackle the "container initialization delay" issue but the package is written to
let user define one that suits their need.

And this is a safety that the use of scripting to launch docker-compose *BEFORE*
tests execution does not provide.

* Final words

The package provides an extensive documentation
.link https://godoc.org/github.com/TimTosi/fishfinger Doc Link

Here is complete working examples
.link https://github.com/TimTosi/fishfinger/blob/master/examples/compose-basic/main.go Basic Link
.link https://github.com/TimTosi/fishfinger/blob/master/examples/compose-backoff/main.go Backoff Link


.link https://github.com/TimTosi/fishfinger STAR IT IF YOU LIKE IT :)
